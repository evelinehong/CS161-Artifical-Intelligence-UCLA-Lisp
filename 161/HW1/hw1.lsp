;Question1
;PAD that takes a single integer argument N, and returns the Nth Padovan number.
(defun PAD(x)
	;base case: if x < 3, PAD(x) = 1
	(cond ((< x 3) 1)
		;Otherwise, recursively compute PAD by equation:
                ; PAD(n+1) = PAD(n-1)+PAD(n-2) 
		(t (+ (PAD(- x 2)) (PAD(- x 3))))))


;Question2
;SUMS takes a single numeric argument N, and returns the number of additions required by your PAD function to compute the Nth Padovan number.
(defun SUMS (N)
	;base case: if N < 3, we do not need additions;
	(cond ((< N 3) 0)
		;else, SUMS is generated by adding N-2 SUMS and N-3 SUMS
		(t (+ (SUMS (- N 2)) (SUMS (- N 3)) 1))))



;Question3
;ANON takes a single argument TREE that represents a tree, and returns an anonymized tree with the same structure, but where all symbols and numbers in the tree are replaced by a question mark.
 (defun ANON (tree)
   ;base case1: tree empty, return empty list
   (cond ((not tree) '())
         ;base case2: tree has single node, return a single '?
         ((atom tree) '?)
         ;otherwise, recursively generate the ? tree by checkin ANON function on car and cdr of the tree
         (t (cons (ANON (car tree)) (ANON (cdr tree))))))