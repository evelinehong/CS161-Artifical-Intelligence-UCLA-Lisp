;
; CS161 Hw3: Sokoban
; 
; *********************
;    READ THIS FIRST
; ********************* 
;
; All functions that you need to modify are marked with 'EXERCISE' in their header comments.
; Do not modify a-star.lsp.
; This file also contains many helper functions. You may call any of them in your functions.
;
; *Warning*: The provided A* code only supports the maximum cost of 4999 for any node.
; That is f(n)=g(n)+h(n) < 5000. So, be careful when you write your heuristic functions.
; Do not make them return anything too large.
;
; For Allegro Common Lisp users: The free version of Allegro puts a limit on memory.
; So, it may crash on some hard sokoban problems and there is no easy fix (unless you buy 
; Allegro). 
; Of course, other versions of Lisp may also crash if the problem is too hard, but the amount
; of memory available will be relatively more relaxed.
; Improving the quality of the heuristic will mitigate this problem, as it will allow A* to
; solve hard problems with fewer node expansions.
; 
; In either case, this limitation should not significantly affect your grade.
; 
; Remember that most functions are not graded on efficiency (only correctness).
; Efficiency can only influence your heuristic performance in the competition (which will
; affect your score).
;  
;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General utility functions
; They are not necessary for this homework.
; Use/modify them for your own convenience.
;

;
; For reloading modified code.
; I found this easier than typing (load "filename") every time. 
;
(defun reload()
  (load "hw3.lsp")
  )

;
; For loading a-star.lsp.
;
(defun load-a-star()
  (load "a-star.lsp"))

;
; Reloads hw3.lsp and a-star.lsp
;
(defun reload-all()
  (reload)
  (load-a-star)
  )

;
; A shortcut function.
; goal-test and next-states stay the same throughout the assignment.
; So, you can just call (sokoban <init-state> #'<heuristic-name>).
; 
;
(defun sokoban (s h)
  (a* s #'goal-test #'next-states h)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; end general utility functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We now begin actual Sokoban code
;

; Define some global variables
(setq blank 0)
(setq wall 1)
(setq box 2)
(setq keeper 3)
(setq star 4)
(setq boxstar 5)
(setq keeperstar 6)

; Some helper functions for checking the content of a square
(defun isBlank (v)
  (equal v blank)
  )

(defun isWall (v)
  (equal v wall)
  )

(defun isBox (v)
  (equal v box)
  )

(defun isKeeper (v)
  (equal v keeper)
  )

(defun isStar (v)
  (equal v star)
  )

(defun isBoxStar (v)
  (equal v boxstar)
  )

(defun isKeeperStar (v)
  (equal v keeperstar)
  )

;
; Helper function of getKeeperPosition
;
(defun getKeeperColumn (r col)
  (cond ((null r) nil)
	(t (if (or (isKeeper (car r)) (isKeeperStar (car r)))
	       col
	     (getKeeperColumn (cdr r) (+ col 1))
	     );end if
	   );end t
	);end cond
  )

;
; getKeeperPosition (s firstRow)
; Returns a list indicating the position of the keeper (c r).
; 
; Assumes that the keeper is in row >= firstRow.
; The top row is the zeroth row.
; The first (right) column is the zeroth column.
;
(defun getKeeperPosition (s row)
  (cond ((null s) nil)
	(t (let ((x (getKeeperColumn (car s) 0)))
	     (if x
		 ;keeper is in this row
		 (list x row)
		 ;otherwise move on
		 (getKeeperPosition (cdr s) (+ row 1))
		 );end if
	       );end let
	 );end t
	);end cond
  );end defun

;
; cleanUpList (l)
; returns l with any NIL element removed.
; For example, if l is '(1 2 NIL 3 NIL), returns '(1 2 3).
;
(defun cleanUpList (L)
  (cond ((null L) nil)
	(t (let ((cur (car L))
		 (res (cleanUpList (cdr L)))
		 )
	     (if cur 
		 (cons cur res)
		  res
		 )
	     );end let
	   );end t
	);end cond
  );end 

; EXERCISE: Modify this function to return true (t)
; if and only if s is a goal state of a Sokoban game.
; (no box is on a non-goal square)
;
; Currently, it always returns NIL. If A* is called with
; this function as the goal testing function, A* will never
; terminate until the whole search space is exhausted.
;

;to check whether a line has a box
;helper function of goal-test
;if not, the function returns TRUE, else returns NIL
(defun checkbox (list)
  (cond ((null list) t)
        (t (and (not (isBox (car list))) (checkbox (cdr list))))
  )
)

;goal is when there's no box in the state
(defun goal-test (s)
  (cond ((null s) t)
        (t (and (checkbox (car s)) (goal-test (cdr s)))) 
  )
);end defun

; EXERCISE: Modify this function to return the list of 
; sucessor states of s.
;
; This is the top-level next-states (successor) function.
; Some skeleton code is provided below.
; You may delete them totally, depending on your approach.
; 
; If you want to use it, you will need to set 'result' to be 
; the set of states after moving the keeper in each of the 4 directions.
; A pseudo-code for this is:
; 
; ...
; (result (list (try-move s UP) (try-move s DOWN) (try-move s LEFT) (try-move s RIGHT)))
; ...
; 
; You will need to define the function try-move and decide how to represent UP,DOWN,LEFT,RIGHT.
; Any NIL result returned from try-move can be removed by cleanUpList.
; 
;

;get the element of a specific position
(defun get-square(S r c)
  (cond ((or (< r 0) (< c 0)) nil)
        ;get the rth row of s state, and let the cth column of nth row. If any of the nth function returns nil, get-square returns nil
        (t (nth c (nth r s)))
  )
)

;revise the element of a specific position to a certain value
(defun set-square(S r c v)
    ;if r or c is invalid, the state remains the same
    (cond ((or (< r 0) (< c 0) (null S) (null (car S))) S)
        ;get to the target row by recursively substract 1 from the current row. concat rows before target, target and rows after target
        ((>= r 1) (cons (car S) (set-square (cdr S) (- r 1) c v)))
        ;we set S2 as the remaining state after we delete the first few rows and the first few columns before target position
        ;we recursively substract 1 from the current column, we it reaches the target column, if we send S2 to set-square, it executes the next argument when r = 0 and c = 0
        ;finally, we concat this revised S2 with the previous columns and rows
        ((>= c 1) (let ((S2 (set-square (cons (cdar S) (cdr S))
                  r (- c 1) v))) (cons (cons (caar S) (car S2)) (cdr S2))))
        ;r = 0 and c = 0 means we have reached the target position, so we cons teh value with the rest of S2
        ((and (= r 0) (= c 0)) (cons (cons v (cdar S)) (cdr S)))
  )
)

;this function aims to set the value of the original keeper position when keeper moves
(defun set-keeper(S x y kv)
  ;when keeper is on goal, when keeper moves a goal is left
  (cond ((equal kv keeperstar) (set-square S x y star))
        ;when keeper is not on goal, a blank is left
        ((equal kv keeper) (set-square S x y blank)))
)

(defun try-move(S D)
    (let* ((pos (getKeeperPosition S 0))
	 (y (car pos))
	 (x (cadr pos))
         (kv (get-square S x y))
	 ;x and y are now the coordinate of the keeper in 
         )
      ;we let r1/r2 to be the row of the supposed keeper position after the first/second move (there's a second move because if the keeper moves to a box, the box would move). And c1/c2 to be the column after first/second move.
      (let* ((r1 (cond ((equal D 'up) (- x 1))
                       ((equal D 'down) (+ x 1))
                       (t x)))
             (r2 (cond ((equal D 'up) (- x 2))
                       ((equal D 'down) (+ x 2))
                       (t x)))
             (c1 (cond ((equal D 'left) (- y 1))
                       ((equal D 'right) (+ y 1))
                       (t y)))
             (c2 (cond ((equal D 'left) (- y 2))
                       ((equal D 'right) (+ y 2))
                       (t y))))
       ;we let step1 to be the current value of the supposed keeper next position, and step2 to be the current value of the supposed keeper position after the second move           
       (let* ((step1 (get-square S r1 c1))
              (step2 (get-square S r2 c2))
              ;we let Sk to be the state after we revise the value of the current keeper position
              (Sk (set-keeper S x y kv)))         
               (cond 
                ((isBlank step1) (set-square Sk r1 c1 keeper))
                 ((and (isBox step1) (isBlank step2)) (set-square (set-square Sk r1 c1 keeper) r2 c2 box))
                 ((and (isBox step1) (isStar step2)) (set-square (set-square Sk r1 c1 keeper) r2 c2 boxstar))
                 ((isStar step1) (set-square Sk r1 c1 keeperstar))
                 ((and (isBoxStar step1) (isBlank step2)) (set-square (set-square Sk r1 c1 keeperstar) r2 c2 box))
                 ((and (isBoxStar step1) (isStar step2)) (set-square (set-square Sk r1 c1 keeperstar) r2 c2 boxstar))
                 (t nil)
               ))
      )
   )
)

(defun next-states (s)  
    (cleanUpList (list (try-move s 'up) (try-move s 'down) (try-move s 'left) (try-move s 'right)))
)

; EXERCISE: Modify this function to compute the trivial 
; admissible heuristic.
;
(defun h0 (s)
  0
)

; EXERCISE: Modify this function to compute the 
; number of misplaced boxes in s.
;
(defun h1 (s)
  (cond
	((null s) 0)
	((atom s) (cond ((isBox s) 1) (t 0)))
	(t (+ (h1 (car s)) (h1 (cdr s))))
  )
)
; EXERCISE: Change the name of this function to h<UID> where
; <UID> is your actual student ID number. Then, modify this 
; function to compute an admissible heuristic value of s. 
; 
; This function will be entered in the competition.
; Objective: make A* solve problems as fast as possible.
; The Lisp 'time' function can be used to measure the 
; running time of a function call.
;
; Calculates the absolute value of a number n
(defun absVal (n)
  (cond ((>= n 0) n)
         (T (- 0 n))
  )
)

; Determines the Manhattan distance between two in a list l.
; Takes lists in the format (r1, c1, r2, 2).
(defun manhattan (l)
  (cond ((and (<= (- (car l) (third l)) 1) (<= (- (second l) (fourth l)) 1)) (+ (* (- (car l) (third l)) -1) (* (- (second l) (fourth l)) -1)))
         ((<= (- (car l) (third l)) 1) (+ (* (- (car l) (third l)) -1) (- (second l) (fourth l))))
         ((<= (- (second l) (fourth l)) 1) (+ (- (car l) (third l)) (* (- (second l) (fourth l)) -1)))
         (T (+ (- (car l) (third l)) (- (second l) (fourth l))))
  )
)

; Returns the location of the box nearest to the keeper given state S and box list l.
(defun nearestBox (S l)
        ; Only one box in the state; return location
  (cond ((equal (length l) 1) (list (manhattan (append (car l) (getKeeperPosition S 0))) (car l)))
        ; Two boxes in state; return shorter box's location
        ((equal (length l) 2)
          (cond ((<= (manhattan (append (car l) (getKeeperPosition S 0)))
                     (manhattan (append (second l) (getKeeperPosition S 0)))
                 )
                 (list (manhattan (append (car l) (getKeeperPosition S 0))) (car l))
                )
                (T (list (manhattan (append (second l) (getKeeperPosition S 0))) (second l)))
          )
        )
        ; Else, compare car of box list to rest of boxes
        (T (cond ((<= (manhattan (append (car l) (getKeeperPosition S 0)))
                      (car (nearestBox S (cdr l)))
                  )
                  (list (manhattan (append (car l) (getKeeperPosition s 0))) (car l))
                 )
                 (T (nearestBox s (cdr l)))
            )
         )
  )
)

; Returns the locations of all boxes not yet at the goal;
; given a state S, row r, and column c.
(defun boxesRemaining (S r c)
        ; Null state
  (cond ((null S) ())
        ; Only one element in state; return location
        ((atom S) (cond ((isBox S) (list (cons (- c 1) (cons r ()))))
                  (T ())))
        ; Recursively search state for box locations
        (T (cond ((= c 0) (append (boxesRemaining (car S) r (+ c 1)) (boxesRemaining (cdr S) (+ r 1) c)))
                 (T (append (boxesRemaining (car S) r c) (boxesRemaining (cdr S) r (+ c 1)))))
        )
  )
)

; Returns the locations of all goals not yet filled;
; given a state S, row r, and column c.
(defun goalsRemaining (S r c)
        ; Null state
  (cond ((null S) ())
        ((atom S) (cond ((isStar S) (list (cons (- c 1) (cons r ()))))
                  (T ())))
        ; Recursively search state for box locations
        (T (cond ((= c 0) (append (goalsRemaining (car S) r (+ c 1)) (goalsRemaining (cdr S) (+ r 1) c)))
                  (T (append (goalsRemaining (car S) r c) (goalsRemaining (cdr S) r (+ c 1)))))
        )
  )
)

; Helper function for shortestPath. Finds shortest distance between points a and b.
(defun findShortest (a b)
  (+ (absVal (- (car b) (car a))) (absVal (- (second b) (second a))))
)

; Shortest distance between any two points a and b
(defun shortestPath (a b curr)
  ; Endpoint is current point
  (cond ((null b) curr)
        (T (let ((path (findShortest a (car b))))
                 ; Recursively search for shortest distance
                 (cond ((null curr) (shortestPath a (cdr b) path))
                   ; Did we find a shorter distance?
                   (t (cond ((>= path curr) (shortestPath a (cdr b) curr))
                            (t (shortestPath a (cdr b) path))))
                 )
           )
        )
  )
)

; Sums the distances of each box to their nearest goal
(defun sumPath (box goal)
        ; No boxes
  (cond ((null goal) 0)
        ; Recursively sum path
        (T (+ (shortestPath (car box) goal ()) (sumPath (cdr box) (cdr goal))))
  )
)

; Admissible heuristic to efficiently solve Sokoban puzzle given state s
(defun h2 (s)
        ; Null state
  (cond ((null s) 0)
        ; Are there any boxes remaining? If not, game over
        ((equal (length (boxesRemaining s 0 0)) 0) 0)
        ; Sum distances
        (T  (car (nearestBox s (boxesRemaining s 0 0))) )
  )
)

(defun h305348579 (s)
  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
 | Some predefined problems.
 | Each problem can be visualized by calling (printstate <problem>). For example, (printstate p1).
 | Problems are roughly ordered by their difficulties.
 | For most problems, we also privide 2 additional number per problem:
 |    1) # of nodes expanded by A* using our next-states and h0 heuristic.
 |    2) the depth of the optimal solution.
 | These numbers are located at the comments of the problems. For example, the first problem below 
 | was solved by 80 nodes expansion of A* and its optimal solution depth is 7.
 | 
 | Your implementation may not result in the same number of nodes expanded, but it should probably
 | give something in the same ballpark. As for the solution depth, any admissible heuristic must 
 | make A* return an optimal solution. So, the depths of the optimal solutions provided could be used
 | for checking whether your heuristic is admissible.
 |
 | Warning: some problems toward the end are quite hard and could be impossible to solve without a good heuristic!
 | 
 |#

;(80,7)
(setq p1 '((1 1 1 1 1 1)
	   (1 0 3 0 0 1)
	   (1 0 2 0 0 1)
	   (1 1 0 1 1 1)
	   (1 0 0 0 0 1)
	   (1 0 0 0 4 1)
	   (1 1 1 1 1 1)))

;(110,10)
(setq p2 '((1 1 1 1 1 1 1)
	   (1 0 0 0 0 0 1) 
	   (1 0 0 0 0 0 1) 
	   (1 0 0 2 1 4 1) 
	   (1 3 0 0 1 0 1)
	   (1 1 1 1 1 1 1)))

;(211,12)
(setq p3 '((1 1 1 1 1 1 1 1 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 0 0 0 2 0 3 4 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 1 1 1 1 1 1 1 1)))

;(300,13)
(setq p4 '((1 1 1 1 1 1 1)
	   (0 0 0 0 0 1 4)
	   (0 0 0 0 0 0 0)
	   (0 0 1 1 1 0 0)
	   (0 0 1 0 0 0 0)
	   (0 2 1 0 0 0 0)
	   (0 3 1 0 0 0 0)))

;(551,10)
(setq p5 '((1 1 1 1 1 1)
	   (1 1 0 0 1 1)
	   (1 0 0 0 0 1)
	   (1 4 2 2 4 1)
	   (1 0 0 0 0 1)
	   (1 1 3 1 1 1)
	   (1 1 1 1 1 1)))

;(722,12)
(setq p6 '((1 1 1 1 1 1 1 1)
	   (1 0 0 0 0 0 4 1)
	   (1 0 0 0 2 2 3 1)
	   (1 0 0 1 0 0 4 1)
	   (1 1 1 1 1 1 1 1)))

;(1738,50)
(setq p7 '((1 1 1 1 1 1 1 1 1 1)
	   (0 0 1 1 1 1 0 0 0 3)
	   (0 0 0 0 0 1 0 0 0 0)
	   (0 0 0 0 0 1 0 0 1 0)
	   (0 0 1 0 0 1 0 0 1 0)
	   (0 2 1 0 0 0 0 0 1 0)
	   (0 0 1 0 0 0 0 0 1 4)))

;(1763,22)
(setq p8 '((1 1 1 1 1 1)
	   (1 4 0 0 4 1)
	   (1 0 2 2 0 1)
	   (1 2 0 1 0 1)
	   (1 3 0 0 4 1)
	   (1 1 1 1 1 1)))

;(1806,41)
(setq p9 '((1 1 1 1 1 1 1 1 1) 
	   (1 1 1 0 0 1 1 1 1) 
	   (1 0 0 0 0 0 2 0 1) 
	   (1 0 1 0 0 1 2 0 1) 
	   (1 0 4 0 4 1 3 0 1) 
	   (1 1 1 1 1 1 1 1 1)))

;(10082,51)
(setq p10 '((1 1 1 1 1 0 0)
	    (1 0 0 0 1 1 0)
	    (1 3 2 0 0 1 1)
	    (1 1 0 2 0 0 1)
	    (0 1 1 0 2 0 1)
	    (0 0 1 1 0 0 1)
	    (0 0 0 1 1 4 1)
	    (0 0 0 0 1 4 1)
	    (0 0 0 0 1 4 1)
	    (0 0 0 0 1 1 1)))

;(16517,48)
(setq p11 '((1 1 1 1 1 1 1)
	    (1 4 0 0 0 4 1)
	    (1 0 2 2 1 0 1)
	    (1 0 2 0 1 3 1)
	    (1 1 2 0 1 0 1)
	    (1 4 0 0 4 0 1)
	    (1 1 1 1 1 1 1)))

;(22035,38)
(setq p12 '((0 0 0 0 1 1 1 1 1 0 0 0)
	    (1 1 1 1 1 0 0 0 1 1 1 1)
	    (1 0 0 0 2 0 0 0 0 0 0 1)
	    (1 3 0 0 0 0 0 0 0 0 0 1)
	    (1 0 0 0 2 1 1 1 0 0 0 1)
	    (1 0 0 0 0 1 0 1 4 0 4 1)
	    (1 1 1 1 1 1 0 1 1 1 1 1)))

;(26905,28)
(setq p13 '((1 1 1 1 1 1 1 1 1 1)
	    (1 4 0 0 0 0 0 2 0 1)
	    (1 0 2 0 0 0 0 0 4 1)
	    (1 0 3 0 0 0 0 0 2 1)
	    (1 0 0 0 0 0 0 0 0 1)
	    (1 0 0 0 0 0 0 0 4 1)
	    (1 1 1 1 1 1 1 1 1 1)))

;(41715,53)
(setq p14 '((0 0 1 0 0 0 0)
	    (0 2 1 4 0 0 0)
	    (0 2 0 4 0 0 0)	   
	    (3 2 1 1 1 0 0)
	    (0 0 1 4 0 0 0)))

;(48695,44)
(setq p15 '((1 1 1 1 1 1 1)
	    (1 0 0 0 0 0 1)
	    (1 0 0 2 2 0 1)
	    (1 0 2 0 2 3 1)
	    (1 4 4 1 1 1 1)
	    (1 4 4 1 0 0 0)
	    (1 1 1 1 0 0 0)
	    ))

;(91344,111)
(setq p16 '((1 1 1 1 1 0 0 0)
	    (1 0 0 0 1 0 0 0)
	    (1 2 1 0 1 1 1 1)
	    (1 4 0 0 0 0 0 1)
	    (1 0 0 5 0 5 0 1)
	    (1 0 5 0 1 0 1 1)
	    (1 1 1 0 3 0 1 0)
	    (0 0 1 1 1 1 1 0)))

;(3301278,76)
(setq p17 '((1 1 1 1 1 1 1 1 1 1)
	    (1 3 0 0 1 0 0 0 4 1)
	    (1 0 2 0 2 0 0 4 4 1)
	    (1 0 2 2 2 1 1 4 4 1)
	    (1 0 0 0 0 1 1 4 4 1)
	    (1 1 1 1 1 1 0 0 0 0)))

;(??,25)
(setq p18 '((0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1)
	    (0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0)
	    (0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0)
	    (0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0)
	    (0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0)
	    (0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0)
	    (1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 4 1 0 0 0 0)
	    (0 0 0 0 1 0 2 0 0 0 0 1 0 0 0 0)	    
	    (0 0 0 0 1 0 2 0 0 0 4 1 0 0 0 0)
	    ))
;(??,21)
(setq p19 '((0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (1 1 1 1 0 0 0 0 1 1 1 1)
	    (0 0 0 0 1 0 0 1 0 0 0 0)
	    (0 0 0 0 0 0 3 0 0 0 2 0)
	    (0 0 0 0 1 0 0 1 0 0 0 4)
	    (1 1 1 1 0 0 0 0 1 1 1 1)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 2 0 4 1 0 0 0)))

;(??,??)
(setq p20 '((0 0 0 1 1 1 1 0 0)
	    (1 1 1 1 0 0 1 1 0)
	    (1 0 0 0 2 0 0 1 0)
	    (1 0 0 5 5 5 0 1 0)
	    (1 0 0 4 0 4 0 1 1)
	    (1 1 0 5 0 5 0 0 1)
	    (0 1 1 5 5 5 0 0 1)
	    (0 0 1 0 2 0 1 1 1)
	    (0 0 1 0 3 0 1 0 0)
	    (0 0 1 1 1 1 1 0 0)))

;(??,??)
(setq p21 '((0 0 1 1 1 1 1 1 1 0)
	    (1 1 1 0 0 1 1 1 1 0)
	    (1 0 0 2 0 0 0 1 1 0)
	    (1 3 2 0 2 0 0 0 1 0)
	    (1 1 0 2 0 2 0 0 1 0)
	    (0 1 1 0 2 0 2 0 1 0)
	    (0 0 1 1 0 2 0 0 1 0)
	    (0 0 0 1 1 1 1 0 1 0)
	    (0 0 0 0 1 4 1 0 0 1)
	    (0 0 0 0 1 4 4 4 0 1)
	    (0 0 0 0 1 0 1 4 0 1)
	    (0 0 0 0 1 4 4 4 0 1)
	    (0 0 0 0 1 1 1 1 1 1)))

;(??,??)
(setq p22 '((0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0)
	    (0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0)
	    (0 0 0 0 1 2 0 0 1 0 0 0 0 0 0 0 0 0 0)
	    (0 0 1 1 1 0 0 2 1 1 0 0 0 0 0 0 0 0 0)
	    (0 0 1 0 0 2 0 2 0 1 0 0 0 0 0 0 0 0 0)
	    (1 1 1 0 1 0 1 1 0 1 0 0 0 1 1 1 1 1 1)
	    (1 0 0 0 1 0 1 1 0 1 1 1 1 1 0 0 4 4 1)
	    (1 0 2 0 0 2 0 0 0 0 0 0 0 0 0 0 4 4 1)
	    (1 1 1 1 1 0 1 1 1 0 1 3 1 1 0 0 4 4 1)
	    (0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1)
	    (0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
 | Utility functions for printing states and moves.
 | You do not need to understand any of the functions below this point.
 |#

;
; Helper function of prettyMoves
; from s1 --> s2
;
(defun detectDiff (s1 s2)
  (let* ((k1 (getKeeperPosition s1 0))
	 (k2 (getKeeperPosition s2 0))
	 (deltaX (- (car k2) (car k1)))
	 (deltaY (- (cadr k2) (cadr k1)))
	 )
    (cond ((= deltaX 0) (if (> deltaY 0) 'DOWN 'UP))
	  (t (if (> deltaX 0) 'RIGHT 'LEFT))
	  );end cond
    );end let
  );end defun

;
; Translates a list of states into a list of moves.
; Usage: (prettyMoves (a* <problem> #'goal-test #'next-states #'heuristic))
;
(defun prettyMoves (m)
  (cond ((null m) nil)
	((= 1 (length m)) (list 'END))
	(t (cons (detectDiff (car m) (cadr m)) (prettyMoves (cdr m))))
	);end cond
  );

;
; Print the content of the square to stdout.
;
(defun printSquare (s)
  (cond ((= s blank) (format t " "))
	((= s wall) (format t "#"))
	((= s box) (format t "$"))
	((= s keeper) (format t "@"))
	((= s star) (format t "."))
	((= s boxstar) (format t "*"))
	((= s keeperstar) (format t "+"))
	(t (format t "|"))
	);end cond
  )

;
; Print a row
;
(defun printRow (r)
  (dolist (cur r)
    (printSquare cur)    
    )
  );

;
; Print a state
;
(defun printState (s)
  (progn    
    (dolist (cur s)
      (printRow cur)
      (format t "~%")
      )
    );end progn
  )

;
; Print a list of states with delay.
;
(defun printStates (sl delay)
  (dolist (cur sl)
    (printState cur)
    (sleep delay)
    );end dolist
  );end defun
